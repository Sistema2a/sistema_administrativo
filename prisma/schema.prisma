// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tabla para almacenar los clientes de prestamos
model loan_customers {
  loan_customers_id    Int                   @id @default(autoincrement())
  name                 String
  lastname             String
  telephone            String
  ci                   String                @unique
  direction            String
  email                String
  photo                String?
  loan                 loans[]
  debt_total_customers debt_total_customers?
  create_at            DateTime              @default(now())
  update_at            DateTime              @updatedAt
}

model loan_months {
  month_id  Int      @id @default(autoincrement())
  num_month Int
  age       Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

// Tablas para almacenar los prestamos y sus ingresos
model loans {
  loan_id           Int            @id @default(autoincrement())
  loan              Decimal
  percentage        Int
  revenue           Decimal
  date              DateTime
  status            String         @default("pending")
  loan_customers    loan_customers @relation(fields: [loan_customers_id], references: [loan_customers_id])
  loan_customers_id Int
  loan_revenue      loan_revenue[]
  create_at         DateTime       @default(now())
  update_at         DateTime       @updatedAt
}

model loan_revenue {
  revenue_id   Int      @id @default(autoincrement())
  debt_revenue Decimal
  month        String   @default("")
  age          Int
  date         DateTime
  status       String   @default("pending")
  loans        loans    @relation(fields: [loan_id], references: [loan_id])
  loan_id      Int
  create_at    DateTime @default(now())
  update_at    DateTime @updatedAt
}

// Tabla para almacenar los pagos de los prestamos
model payment_loan {
  payment_id      Int      @id @default(autoincrement())
  payment_amount  Decimal
  payment_date    DateTime
  concept         String
  loan_revenue_id Int?
  loan_id         Int?
  create_at       DateTime @default(now())
  update_at       DateTime @updatedAt
}

// Tabla para almacenar la deuda total de los clientes
model debt_total_customers {
  debt_id           Int            @id @default(autoincrement())
  debt_total        Decimal
  loan_customers    loan_customers @relation(fields: [loan_customers_id], references: [loan_customers_id])
  loan_customers_id Int            @unique
  create_at         DateTime       @default(now())
  update_at         DateTime       @updatedAt
}

// Tabla para almacenar el dinero ingresado y egresado del sistema
model cash_principal {
  cash_id    Int      @id
  cash_total Decimal
  create_at  DateTime @default(now())
  update_at  DateTime @updatedAt
}

model cash_register {
  cash_register_id Int      @id @default(autoincrement())
  description      String
  cash             Decimal
  date             DateTime
  concept          String
  create_at        DateTime @default(now())
  update_at        DateTime @updatedAt
}

//Tablas relacionadas a la deuda del sistema
model users_debt_sistema {
  user_debt_sistema_id Int                    @id @default(autoincrement())
  user                 String
  debt_total           Decimal
  history_debt_sistema history_debt_sistema[]
  create_at            DateTime               @default(now())
  update_at            DateTime               @updatedAt
}

model history_debt_sistema {
  history_debt_sistema_id Int                @id @default(autoincrement())
  amount                  Decimal
  concept                 String
  date                    DateTime
  users_debt_sistema      users_debt_sistema @relation(fields: [user_debt_sistema_id], references: [user_debt_sistema_id])
  user_debt_sistema_id    Int
  create_at               DateTime           @default(now())
  update_at               DateTime           @updatedAt
}

model users_account_receivable {
  users_account_receivable_id Int                          @id @default(autoincrement())
  account                        String
  debt_total                  Decimal
  history_account_receivable  history_account_receivable[]
  create_at                   DateTime                     @default(now())
  update_at                   DateTime                     @updatedAt
}

model history_account_receivable {
  history_debt_sistema_id     Int                @id @default(autoincrement())
  amount                      Decimal
  concept                     String
  date                        DateTime
  users_account_receivable          users_account_receivable @relation(fields: [users_account_receivable_id], references: [users_account_receivable_id])
  users_account_receivable_id Int
  create_at                   DateTime           @default(now())
  update_at                   DateTime           @updatedAt
}
